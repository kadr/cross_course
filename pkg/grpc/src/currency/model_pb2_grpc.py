# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.grpc.src.currency import model_pb2 as currency_dot_model__pb2


class CurrencyServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrency = channel.unary_unary(
                '/CurrencyServices/GetCurrency',
                request_serializer=currency_dot_model__pb2.GetCurrencyRequest.SerializeToString,
                response_deserializer=currency_dot_model__pb2.GetCurrencyResponse.FromString,
                )
        self.GetCurrencies = channel.unary_unary(
                '/CurrencyServices/GetCurrencies',
                request_serializer=currency_dot_model__pb2.GetCurrenciesRequest.SerializeToString,
                response_deserializer=currency_dot_model__pb2.GetCurrenciesResponse.FromString,
                )
        self.AddCurrency = channel.unary_unary(
                '/CurrencyServices/AddCurrency',
                request_serializer=currency_dot_model__pb2.AddCurrencyRequest.SerializeToString,
                response_deserializer=currency_dot_model__pb2.GetCurrencyResponse.FromString,
                )


class CurrencyServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCurrency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCurrency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CurrencyServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrency,
                    request_deserializer=currency_dot_model__pb2.GetCurrencyRequest.FromString,
                    response_serializer=currency_dot_model__pb2.GetCurrencyResponse.SerializeToString,
            ),
            'GetCurrencies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrencies,
                    request_deserializer=currency_dot_model__pb2.GetCurrenciesRequest.FromString,
                    response_serializer=currency_dot_model__pb2.GetCurrenciesResponse.SerializeToString,
            ),
            'AddCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCurrency,
                    request_deserializer=currency_dot_model__pb2.AddCurrencyRequest.FromString,
                    response_serializer=currency_dot_model__pb2.GetCurrencyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CurrencyServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CurrencyServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CurrencyServices/GetCurrency',
            currency_dot_model__pb2.GetCurrencyRequest.SerializeToString,
            currency_dot_model__pb2.GetCurrencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CurrencyServices/GetCurrencies',
            currency_dot_model__pb2.GetCurrenciesRequest.SerializeToString,
            currency_dot_model__pb2.GetCurrenciesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CurrencyServices/AddCurrency',
            currency_dot_model__pb2.AddCurrencyRequest.SerializeToString,
            currency_dot_model__pb2.GetCurrencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
